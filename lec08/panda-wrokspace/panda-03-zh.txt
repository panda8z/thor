因此，
我们想出的任何顺序都必须在X的权利之前加上X并加上2，
并且由于X在2的见解中没有其他权利，
这意味着此时的读取只能看到0或1，
因为那是在阅读之前可能仅有的其他2种权利，
因此移动您知道将这些权利转移很多会使示例无法线性化是的，
我是说第一条垂直线是客户端发送请求的那一刻第二条垂直线是客户收到请求的那一刻，
是的，
是的，
这是一种非常以客户为中心的定义，
它表示您知道客户应该看到以下行为，
并且在我们发送请求后会发生什么，
也许副本可能是一个复杂的网络，
它知道几乎与我们无关的业务，
我们的定义只是关于客户所看到的内容，
我们会在瞬间看到一些灰色区域，
例如客户是否需要重新发送要求否则我们还必须知道这是我们必须考虑的事情，
所以这是线性的，
这是另一个示例，
我实际上将以几乎相同的方式开始，
而我将首先以相同的方式开始再举个例子，
我们有一个X为0的权限，
我们拥有这两个并发的权限，
并且我们有两个相同的读取，
它们与前面的示例到目前为止是完全相同的，
因此我们知道这必须是最小的，
但是我要让我们想象一下，
客户1发出了这两个请求，
定义并不真正关心客户，
但是她自己的理智将客户1假定为红色X，
然后看到两个，
然后再使用红色X并看到一个，
但是到目前为止，
我还说另一个客户端，
另一个客户端读取X，
它看到一个1，
然后另一个客户端是X的第二个读取，
它看到-因此这是可线性化的，
我们要么必须提出一个订单，
要么在此之前里面有一个循环的图，
所以你知道令人困惑的事情是，
如果一个客户看到这里只有两项权利，
那么他们就会以任何顺序知道，
或者其中一项权利排在第一位，
或者另一种利率排在第一位，
并且直观地，
客户发现一项拥有价值的权利首先是价值权，
然后是价值权，
这两个意思是，
必须这样，
即在看到了这一点之后，
必须以两个权利的任何法律顺序出现在一个人的权利之前，
以便攀登。我们在这里看到的顺序相同，
但是客户体验的对称性清楚地表明了相反的权利，
对经验丰富的客户来说，
对不起，
那就是相反的客户首先看到一个人的权利，
然后又看到具有价值的权利，
这里的规则之一就是只有一个总的操作顺序不允许不同的客户看到不同的历史或不同的进度存储在系统中的值的演变只有所有客户的总顺序是必须经历与一个订单一致的操作，
并且如果一位客户清楚地表明该订单是正确的，
那么该客户就正确了，
因此，
我们应该不能让任何其他客户观察到该订单是其他订单的证据这就是我们在这里所拥有的，
所以这是对这里出了什么问题的直观解释，
顺便说一下，
在我们构建和查看的系统中可能出现这种情况的原因是我们正在构建复制系统您知道筏副本或其中具有缓存的系统，
但是我们正在构建的系统具有许多数据副本，
因此，
可能有许多服务器中包含X副本，
并且如果没有，
它们在不同时间可能具有不同的值获得提交或某些副本可能具有一个值的某些值，
但是尽管如此，
如果我们的系统是线性的或高度一致的，
则它必须表现得好像只有一个数据副本和一个线性序列对数据执行操作的重要性，
这就是一个有趣的例子，
因为它可能出现在一种错误的系统中，
该系统具有数据的两个副本，
一个副本按一个顺序执行这些权限，
而另一个副本按以下顺序执行权限：其他顺序，
然后我们可以看到这一点，
并且线性化能力说不，
我们看不到我们不允许在正确的系统中看到它，
因此图中的循环早于该图表，
这是一种排序稍微证明一点的证据e证明这不是线性化的，
是两个的权利必须在客户的两个读取之前，
所以有一个这样的箭头，
因此此权利必须在读取的客户的读取必须放在右边之前X的值为1的情况，
否则，
如果您可以想象此权利可能会在订单的较早发生，
则此读取将无法看到一项权利，
但是在这种情况下，
对X的读取将看不到它会看到两项的权利，
因为我们知道这个家伙看到了两个